// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package rest_test

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDfb66c62DecodeGithubComAfadeevzRestTmp(in *jlexer.Lexer, out *SetResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfb66c62EncodeGithubComAfadeevzRestTmp(out *jwriter.Writer, in SetResp) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfb66c62EncodeGithubComAfadeevzRestTmp(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfb66c62DecodeGithubComAfadeevzRestTmp(l, v)
}
func easyjsonDfb66c62DecodeGithubComAfadeevzRestTmp1(in *jlexer.Lexer, out *SetReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = int(in.Int())
		case "value":
			out.Value = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfb66c62EncodeGithubComAfadeevzRestTmp1(out *jwriter.Writer, in SetReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Key))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Int(int(in.Value))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfb66c62EncodeGithubComAfadeevzRestTmp1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfb66c62DecodeGithubComAfadeevzRestTmp1(l, v)
}
func easyjsonDfb66c62DecodeGithubComAfadeevzRestTmp2(in *jlexer.Lexer, out *GetResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfb66c62EncodeGithubComAfadeevzRestTmp2(out *jwriter.Writer, in GetResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Value))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfb66c62EncodeGithubComAfadeevzRestTmp2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfb66c62DecodeGithubComAfadeevzRestTmp2(l, v)
}
func easyjsonDfb66c62DecodeGithubComAfadeevzRestTmp3(in *jlexer.Lexer, out *GetReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfb66c62EncodeGithubComAfadeevzRestTmp3(out *jwriter.Writer, in GetReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Key))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfb66c62EncodeGithubComAfadeevzRestTmp3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfb66c62DecodeGithubComAfadeevzRestTmp3(l, v)
}
func easyjsonDfb66c62DecodeGithubComAfadeevzRestTmp4(in *jlexer.Lexer, out *ErrorResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfb66c62EncodeGithubComAfadeevzRestTmp4(out *jwriter.Writer, in ErrorResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfb66c62EncodeGithubComAfadeevzRestTmp4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfb66c62DecodeGithubComAfadeevzRestTmp4(l, v)
}
